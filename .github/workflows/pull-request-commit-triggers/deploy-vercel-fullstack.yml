name: Deploy Full-Stack Branch to Vercel (Backend First, Then Frontend)

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - feat-*
      - feature/*
      - develop
      - hotfix/*

jobs:
  deploy-backend:
    runs-on: ubuntu-latest
    outputs:
      backend-url: ${{ steps.deploy.outputs.preview-url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: |
          cd backend
          npm ci

      - name: Deploy Backend Branch to Vercel (Preview)
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_BACKEND_PROJECT_ID }}
          working-directory: ./backend
          github-comment: true

      - name: Debug backend deployment outputs
        run: |
          echo "Backend deployment outputs:"
          echo "preview-url: ${{ steps.deploy.outputs.preview-url }}"
          echo "deployment-url: ${{ steps.deploy.outputs.deployment-url }}"
          echo "All available outputs:"
          echo "${{ toJson(steps.deploy.outputs) }}"

      - name: Test backend deployment
        run: |
          BACKEND_URL="${{ steps.deploy.outputs.preview-url }}"
          echo "Testing backend at: $BACKEND_URL"
          
          # Test if backend URL contains "backend"
          if [[ "$BACKEND_URL" != *"backend"* ]]; then
            echo "‚ùå ERROR: Backend URL doesn't contain 'backend': $BACKEND_URL"
            echo "This looks like a frontend URL, not a backend URL!"
            exit 1
          fi
          
          # Test if backend is accessible
          echo "Testing backend health endpoint..."
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$BACKEND_URL/api/health" || echo "FAILED")
          
          if [ "$HTTP_STATUS" = "200" ]; then
            echo "‚úÖ Backend is responding correctly at: $BACKEND_URL"
          else
            echo "‚ùå Backend health check failed. Status: $HTTP_STATUS"
            echo "Trying to get more info..."
            curl -v "$BACKEND_URL/api/health" || true
            exit 1
          fi
          
          echo "Backend URL verified: $BACKEND_URL"

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: deploy-backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Debug environment variables
        run: |
          echo "Environment variables for frontend build:"
          echo "VITE_API_BASE_URL: ${{ needs.deploy-backend.outputs.backend-url }}"
          echo "Backend URL from previous job: ${{ needs.deploy-backend.outputs.backend-url }}"

      - name: Build project
        run: |
          cd frontend
          npm run build
        env:
          VITE_API_BASE_URL: ${{ needs.deploy-backend.outputs.backend-url }}

      - name: Deploy Frontend Branch to Vercel (Preview)
        id: deploy-frontend
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_FRONTEND_PROJECT_ID }}
          working-directory: ./frontend
          github-comment: true

      - name: Test integration
        run: |
          FRONTEND_URL="${{ steps.deploy-frontend.outputs.preview-url }}"
          BACKEND_URL="${{ needs.deploy-backend.outputs.backend-url }}"
          
          echo "üß™ Integration Test Results:"
          echo "Frontend: $FRONTEND_URL"
          echo "Backend: $BACKEND_URL"
          
          # Test if frontend can reach backend
          echo "Testing if frontend can reach backend..."
          
          # Use a simple curl to test CORS and connectivity
          curl -H "Origin: $FRONTEND_URL" \
               -H "Access-Control-Request-Method: GET" \
               -H "Access-Control-Request-Headers: Content-Type" \
               -X OPTIONS \
               "$BACKEND_URL/api/setup/health/hello" -v || echo "CORS preflight failed"
          
          echo "‚úÖ Integration test completed. Check browser console for frontend logs." 